version: "3.8"

services:
  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - cocovoit
    environment:
      - PROMETHEUS_CONFIG=/etc/prometheus/prometheus.yml

  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - cocovoit
    depends_on:
      - prometheus
      - loki

  loki:
    # build:
    #   context: ./loki
    #   dockerfile: Dockerfile
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - cocovoit
    environment:
      - LOKI_CONFIG=/etc/loki/loki-config.yaml

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    ports:
      - "8081:8081"
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin1
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin1
      - KC_HOSTNAME_PORT=8081
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/realms:/opt/keycloak/data/import
    command: ["start-dev", "--http-port=8081", "--import-realm"]
    networks:
      - cocovoit

  # build:
  #   context: ./keycloak
  #   dockerfile: Dockerfile
  # container_name: keycloak
  # ports:
  #   - "8081:8081"
  # volumes:
  #   - keycloak_data:/opt/keycloak/data
  # networks:
  #   - cocovoit

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # Port Kafka
      - "9093:9093" # Port du contr√¥leur KRaft
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_NODE_ID: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 # Mettre kafka si on dockerise le back
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      CLUSTER_ID: "demo-kafka-cluster"
    networks:
      - cocovoit

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025" # Port SMTP
      - "8025:8025" # Port interface web
    restart: always
    networks:
      - cocovoit
  
  # Backend
  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: cocovoit
      MYSQL_DATABASE: cocovoit
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - cocovoit

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: cocovoit
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - cocovoit

  backend:
    image: yannickboyer/cocovoit-api:latest
    container_name: backend
    ports:
      - "44318:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - mysql
    networks:
      - cocovoit

  frontend:
    image: yannickboyer/cocovoit-front:latest
    container_name: frontend
    ports:
      - "44319:80"
    networks:
      - cocovoit

networks:
  cocovoit:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  keycloak_data:
  mysql_data:
